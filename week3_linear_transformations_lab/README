# Week 3 ‚Äì Linear Transformations Lab
## Math for Machine Learning ‚Äî DeepLearning.AI Specialization

This lab focuses on building geometric and algebraic intuition for linear transformations and their applications in neural networks.

---

## üîç What This Lab Covers

### 1. **Vectors and Linear Transformations**
- Defined transformations as functions from one vector space to another
- Explored matrix-based linear mappings:
  - `T(v) = A @ v`
- Visualized the effect of transformations on 2D vectors and images

### 2. **Standard Basis and Matrix Construction**
- Used standard basis vectors \( e_1, e_2 \) to define transformations
- Constructed transformation matrices by analyzing \( T(e_1), T(e_2) \)

### 3. **2D Image Transformations**
- Applied transformations to a real image represented as a 2√óN matrix of points
- Implemented:
  - Horizontal & vertical scaling
  - Scalar stretching
  - Reflections across x/y axes
  - Rotation by arbitrary angles
- Visualized transformed images and basis vectors

### 4. **Mathematical Operations Recap**
- Matrix multiplication for geometric transformation
- Broadcasting and reshaping vectors for matrix math
- Used NumPy throughout for efficient implementation

---

## üß† Neural Network Connection

### 5. **Forward Propagation from Scratch**
- Implemented linear forward propagation:
  \[
  Z = W \cdot X + b \quad,\quad \hat{Y} = Z
  \]
- Built a minimal neural network model with:
  - Parameter initialization
  - Forward pass
  - Cost function (MSE)
  - Manual weight updates with `utils.train_nn`

### 6. **Key Functions Implemented**
- `T_stretch(a, v)`
- `T_hshear(m, v)`
- `T_rotation(theta, v)`
- `forward_propagation(X, parameters)`
- `compute_cost(Y_hat, Y)`
- `nn_model(X, Y, num_iterations=1000)`

---

## üìÅ Folder Structure

